// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package predict

import (
	"bytes"
	"fmt"
	"code.byted.org/gopkg/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Predict interface {
	// Parameters:
	//  - Req
	BinaryPredict(req *Req) (r *BinaryRsp, err error)
	// Parameters:
	//  - Req
	BinarySearch(req *Req) (r *BinaryRsp, err error)
	// Parameters:
	//  - Req
	RelatePredict(req *Req) (r *BinaryRsp, err error)
	// Parameters:
	//  - Req
	FeedPredict(req *Req) (r *BinaryRsp, err error)
	// Parameters:
	//  - Req
	UploadServerImpr(req *Req) (r *ServerImprRsp, err error)
	// Parameters:
	//  - Req
	UploadServerImprOneway(req *Req) (err error)
	// Parameters:
	//  - Req
	Ack(req *AckReq) (r *AckRsp, err error)
	// Parameters:
	//  - Req
	UploadApplist(req *AckReq) (r *AckRsp, err error)
}

type PredictClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewPredictClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PredictClient {
	return &PredictClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewPredictClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PredictClient {
	return &PredictClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Req
func (p *PredictClient) BinaryPredict(req *Req) (r *BinaryRsp, err error) {
	if err = p.sendBinaryPredict(req); err != nil {
		return
	}
	return p.recvBinaryPredict()
}

func (p *PredictClient) sendBinaryPredict(req *Req) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("binary_predict", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BinaryPredictArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PredictClient) recvBinaryPredict() (value *BinaryRsp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error8 error
		error8, err = error7.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error8
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "binary_predict failed: out of sequence response")
		return
	}
	result := BinaryPredictResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *PredictClient) BinarySearch(req *Req) (r *BinaryRsp, err error) {
	if err = p.sendBinarySearch(req); err != nil {
		return
	}
	return p.recvBinarySearch()
}

func (p *PredictClient) sendBinarySearch(req *Req) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("binary_search", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BinarySearchArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PredictClient) recvBinarySearch() (value *BinaryRsp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error9 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error10 error
		error10, err = error9.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error10
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "binary_search failed: out of sequence response")
		return
	}
	result := BinarySearchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *PredictClient) RelatePredict(req *Req) (r *BinaryRsp, err error) {
	if err = p.sendRelatePredict(req); err != nil {
		return
	}
	return p.recvRelatePredict()
}

func (p *PredictClient) sendRelatePredict(req *Req) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("relate_predict", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RelatePredictArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PredictClient) recvRelatePredict() (value *BinaryRsp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "relate_predict failed: out of sequence response")
		return
	}
	result := RelatePredictResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *PredictClient) FeedPredict(req *Req) (r *BinaryRsp, err error) {
	if err = p.sendFeedPredict(req); err != nil {
		return
	}
	return p.recvFeedPredict()
}

func (p *PredictClient) sendFeedPredict(req *Req) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("feed_predict", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FeedPredictArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PredictClient) recvFeedPredict() (value *BinaryRsp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error13 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error14 error
		error14, err = error13.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error14
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "feed_predict failed: out of sequence response")
		return
	}
	result := FeedPredictResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *PredictClient) UploadServerImpr(req *Req) (r *ServerImprRsp, err error) {
	if err = p.sendUploadServerImpr(req); err != nil {
		return
	}
	return p.recvUploadServerImpr()
}

func (p *PredictClient) sendUploadServerImpr(req *Req) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("upload_server_impr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UploadServerImprArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PredictClient) recvUploadServerImpr() (value *ServerImprRsp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error15 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error16 error
		error16, err = error15.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error16
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "upload_server_impr failed: out of sequence response")
		return
	}
	result := UploadServerImprResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *PredictClient) UploadServerImprOneway(req *Req) (err error) {
	if err = p.sendUploadServerImprOneway(req); err != nil {
		return
	}
	return
}

func (p *PredictClient) sendUploadServerImprOneway(req *Req) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("upload_server_impr_oneway", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := UploadServerImprOnewayArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - Req
func (p *PredictClient) Ack(req *AckReq) (r *AckRsp, err error) {
	if err = p.sendAck(req); err != nil {
		return
	}
	return p.recvAck()
}

func (p *PredictClient) sendAck(req *AckReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ack", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AckArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PredictClient) recvAck() (value *AckRsp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error17 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error18 error
		error18, err = error17.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error18
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ack failed: out of sequence response")
		return
	}
	result := AckResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Req
func (p *PredictClient) UploadApplist(req *AckReq) (r *AckRsp, err error) {
	if err = p.sendUploadApplist(req); err != nil {
		return
	}
	return p.recvUploadApplist()
}

func (p *PredictClient) sendUploadApplist(req *AckReq) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("upload_applist", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UploadApplistArgs{
		Req: req,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PredictClient) recvUploadApplist() (value *AckRsp, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error19 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error20 error
		error20, err = error19.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error20
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "upload_applist failed: out of sequence response")
		return
	}
	result := UploadApplistResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type PredictProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Predict
}

func (p *PredictProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PredictProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PredictProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPredictProcessor(handler Predict) *PredictProcessor {

	self21 := &PredictProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self21.processorMap["binary_predict"] = &predictProcessorBinaryPredict{handler: handler}
	self21.processorMap["binary_search"] = &predictProcessorBinarySearch{handler: handler}
	self21.processorMap["relate_predict"] = &predictProcessorRelatePredict{handler: handler}
	self21.processorMap["feed_predict"] = &predictProcessorFeedPredict{handler: handler}
	self21.processorMap["upload_server_impr"] = &predictProcessorUploadServerImpr{handler: handler}
	self21.processorMap["upload_server_impr_oneway"] = &predictProcessorUploadServerImprOneway{handler: handler}
	self21.processorMap["ack"] = &predictProcessorAck{handler: handler}
	self21.processorMap["upload_applist"] = &predictProcessorUploadApplist{handler: handler}
	return self21
}

func (p *PredictProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x22 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x22.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x22

}

type predictProcessorBinaryPredict struct {
	handler Predict
}

func (p *predictProcessorBinaryPredict) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BinaryPredictArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("binary_predict", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BinaryPredictResult{}
	var retval *BinaryRsp
	var err2 error
	if retval, err2 = p.handler.BinaryPredict(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing binary_predict: "+err2.Error())
		oprot.WriteMessageBegin("binary_predict", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("binary_predict", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type predictProcessorBinarySearch struct {
	handler Predict
}

func (p *predictProcessorBinarySearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BinarySearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("binary_search", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BinarySearchResult{}
	var retval *BinaryRsp
	var err2 error
	if retval, err2 = p.handler.BinarySearch(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing binary_search: "+err2.Error())
		oprot.WriteMessageBegin("binary_search", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("binary_search", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type predictProcessorRelatePredict struct {
	handler Predict
}

func (p *predictProcessorRelatePredict) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RelatePredictArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("relate_predict", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RelatePredictResult{}
	var retval *BinaryRsp
	var err2 error
	if retval, err2 = p.handler.RelatePredict(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing relate_predict: "+err2.Error())
		oprot.WriteMessageBegin("relate_predict", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("relate_predict", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type predictProcessorFeedPredict struct {
	handler Predict
}

func (p *predictProcessorFeedPredict) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FeedPredictArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("feed_predict", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FeedPredictResult{}
	var retval *BinaryRsp
	var err2 error
	if retval, err2 = p.handler.FeedPredict(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing feed_predict: "+err2.Error())
		oprot.WriteMessageBegin("feed_predict", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("feed_predict", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type predictProcessorUploadServerImpr struct {
	handler Predict
}

func (p *predictProcessorUploadServerImpr) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UploadServerImprArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("upload_server_impr", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UploadServerImprResult{}
	var retval *ServerImprRsp
	var err2 error
	if retval, err2 = p.handler.UploadServerImpr(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing upload_server_impr: "+err2.Error())
		oprot.WriteMessageBegin("upload_server_impr", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("upload_server_impr", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type predictProcessorUploadServerImprOneway struct {
	handler Predict
}

func (p *predictProcessorUploadServerImprOneway) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UploadServerImprOnewayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.UploadServerImprOneway(args.Req); err2 != nil {
		return true, err2
	}
	return true, nil
}

type predictProcessorAck struct {
	handler Predict
}

func (p *predictProcessorAck) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AckArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ack", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AckResult{}
	var retval *AckRsp
	var err2 error
	if retval, err2 = p.handler.Ack(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ack: "+err2.Error())
		oprot.WriteMessageBegin("ack", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ack", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type predictProcessorUploadApplist struct {
	handler Predict
}

func (p *predictProcessorUploadApplist) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UploadApplistArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("upload_applist", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UploadApplistResult{}
	var retval *AckRsp
	var err2 error
	if retval, err2 = p.handler.UploadApplist(args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing upload_applist: "+err2.Error())
		oprot.WriteMessageBegin("upload_applist", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("upload_applist", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type BinaryPredictArgs struct {
	Req *Req `thrift:"req,1" json:"req"`
}

func NewBinaryPredictArgs() *BinaryPredictArgs {
	return &BinaryPredictArgs{}
}

var BinaryPredictArgs_Req_DEFAULT *Req

func (p *BinaryPredictArgs) GetReq() *Req {
	if !p.IsSetReq() {
		return BinaryPredictArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BinaryPredictArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BinaryPredictArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BinaryPredictArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &Req{
		EnableRank: true,

		Source: 1,

		Business: 1,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *BinaryPredictArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("binary_predict_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BinaryPredictArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *BinaryPredictArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BinaryPredictArgs(%+v)", *p)
}

type BinaryPredictResult struct {
	Success *BinaryRsp `thrift:"success,0" json:"success"`
}

func NewBinaryPredictResult() *BinaryPredictResult {
	return &BinaryPredictResult{}
}

var BinaryPredictResult_Success_DEFAULT *BinaryRsp

func (p *BinaryPredictResult) GetSuccess() *BinaryRsp {
	if !p.IsSetSuccess() {
		return BinaryPredictResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BinaryPredictResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BinaryPredictResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BinaryPredictResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &BinaryRsp{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *BinaryPredictResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("binary_predict_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BinaryPredictResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *BinaryPredictResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BinaryPredictResult(%+v)", *p)
}

type BinarySearchArgs struct {
	Req *Req `thrift:"req,1" json:"req"`
}

func NewBinarySearchArgs() *BinarySearchArgs {
	return &BinarySearchArgs{}
}

var BinarySearchArgs_Req_DEFAULT *Req

func (p *BinarySearchArgs) GetReq() *Req {
	if !p.IsSetReq() {
		return BinarySearchArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BinarySearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BinarySearchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BinarySearchArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &Req{
		EnableRank: true,

		Source: 1,

		Business: 1,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *BinarySearchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("binary_search_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BinarySearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *BinarySearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BinarySearchArgs(%+v)", *p)
}

type BinarySearchResult struct {
	Success *BinaryRsp `thrift:"success,0" json:"success"`
}

func NewBinarySearchResult() *BinarySearchResult {
	return &BinarySearchResult{}
}

var BinarySearchResult_Success_DEFAULT *BinaryRsp

func (p *BinarySearchResult) GetSuccess() *BinaryRsp {
	if !p.IsSetSuccess() {
		return BinarySearchResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BinarySearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BinarySearchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BinarySearchResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &BinaryRsp{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *BinarySearchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("binary_search_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BinarySearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *BinarySearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BinarySearchResult(%+v)", *p)
}

type RelatePredictArgs struct {
	Req *Req `thrift:"req,1" json:"req"`
}

func NewRelatePredictArgs() *RelatePredictArgs {
	return &RelatePredictArgs{}
}

var RelatePredictArgs_Req_DEFAULT *Req

func (p *RelatePredictArgs) GetReq() *Req {
	if !p.IsSetReq() {
		return RelatePredictArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *RelatePredictArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelatePredictArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RelatePredictArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &Req{
		EnableRank: true,

		Source: 1,

		Business: 1,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *RelatePredictArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("relate_predict_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RelatePredictArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *RelatePredictArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatePredictArgs(%+v)", *p)
}

type RelatePredictResult struct {
	Success *BinaryRsp `thrift:"success,0" json:"success"`
}

func NewRelatePredictResult() *RelatePredictResult {
	return &RelatePredictResult{}
}

var RelatePredictResult_Success_DEFAULT *BinaryRsp

func (p *RelatePredictResult) GetSuccess() *BinaryRsp {
	if !p.IsSetSuccess() {
		return RelatePredictResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RelatePredictResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelatePredictResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RelatePredictResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &BinaryRsp{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *RelatePredictResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("relate_predict_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RelatePredictResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RelatePredictResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelatePredictResult(%+v)", *p)
}

type FeedPredictArgs struct {
	Req *Req `thrift:"req,1" json:"req"`
}

func NewFeedPredictArgs() *FeedPredictArgs {
	return &FeedPredictArgs{}
}

var FeedPredictArgs_Req_DEFAULT *Req

func (p *FeedPredictArgs) GetReq() *Req {
	if !p.IsSetReq() {
		return FeedPredictArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FeedPredictArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FeedPredictArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FeedPredictArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &Req{
		EnableRank: true,

		Source: 1,

		Business: 1,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *FeedPredictArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("feed_predict_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FeedPredictArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *FeedPredictArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedPredictArgs(%+v)", *p)
}

type FeedPredictResult struct {
	Success *BinaryRsp `thrift:"success,0" json:"success"`
}

func NewFeedPredictResult() *FeedPredictResult {
	return &FeedPredictResult{}
}

var FeedPredictResult_Success_DEFAULT *BinaryRsp

func (p *FeedPredictResult) GetSuccess() *BinaryRsp {
	if !p.IsSetSuccess() {
		return FeedPredictResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FeedPredictResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FeedPredictResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FeedPredictResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &BinaryRsp{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *FeedPredictResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("feed_predict_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FeedPredictResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FeedPredictResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FeedPredictResult(%+v)", *p)
}

type UploadServerImprArgs struct {
	Req *Req `thrift:"req,1" json:"req"`
}

func NewUploadServerImprArgs() *UploadServerImprArgs {
	return &UploadServerImprArgs{}
}

var UploadServerImprArgs_Req_DEFAULT *Req

func (p *UploadServerImprArgs) GetReq() *Req {
	if !p.IsSetReq() {
		return UploadServerImprArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UploadServerImprArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadServerImprArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UploadServerImprArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &Req{
		EnableRank: true,

		Source: 1,

		Business: 1,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *UploadServerImprArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upload_server_impr_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UploadServerImprArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *UploadServerImprArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadServerImprArgs(%+v)", *p)
}

type UploadServerImprResult struct {
	Success *ServerImprRsp `thrift:"success,0" json:"success"`
}

func NewUploadServerImprResult() *UploadServerImprResult {
	return &UploadServerImprResult{}
}

var UploadServerImprResult_Success_DEFAULT *ServerImprRsp

func (p *UploadServerImprResult) GetSuccess() *ServerImprRsp {
	if !p.IsSetSuccess() {
		return UploadServerImprResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UploadServerImprResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UploadServerImprResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UploadServerImprResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ServerImprRsp{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *UploadServerImprResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upload_server_impr_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UploadServerImprResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UploadServerImprResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadServerImprResult(%+v)", *p)
}

type UploadServerImprOnewayArgs struct {
	Req *Req `thrift:"req,1" json:"req"`
}

func NewUploadServerImprOnewayArgs() *UploadServerImprOnewayArgs {
	return &UploadServerImprOnewayArgs{}
}

var UploadServerImprOnewayArgs_Req_DEFAULT *Req

func (p *UploadServerImprOnewayArgs) GetReq() *Req {
	if !p.IsSetReq() {
		return UploadServerImprOnewayArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UploadServerImprOnewayArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadServerImprOnewayArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UploadServerImprOnewayArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &Req{
		EnableRank: true,

		Source: 1,

		Business: 1,
	}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *UploadServerImprOnewayArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upload_server_impr_oneway_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UploadServerImprOnewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *UploadServerImprOnewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadServerImprOnewayArgs(%+v)", *p)
}

type AckArgs struct {
	Req *AckReq `thrift:"req,1" json:"req"`
}

func NewAckArgs() *AckArgs {
	return &AckArgs{}
}

var AckArgs_Req_DEFAULT *AckReq

func (p *AckArgs) GetReq() *AckReq {
	if !p.IsSetReq() {
		return AckArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AckArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AckArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AckArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &AckReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *AckArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ack_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AckArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *AckArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AckArgs(%+v)", *p)
}

type AckResult struct {
	Success *AckRsp `thrift:"success,0" json:"success"`
}

func NewAckResult() *AckResult {
	return &AckResult{}
}

var AckResult_Success_DEFAULT *AckRsp

func (p *AckResult) GetSuccess() *AckRsp {
	if !p.IsSetSuccess() {
		return AckResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AckResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AckResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AckResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AckRsp{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AckResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ack_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AckResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AckResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AckResult(%+v)", *p)
}

type UploadApplistArgs struct {
	Req *AckReq `thrift:"req,1" json:"req"`
}

func NewUploadApplistArgs() *UploadApplistArgs {
	return &UploadApplistArgs{}
}

var UploadApplistArgs_Req_DEFAULT *AckReq

func (p *UploadApplistArgs) GetReq() *AckReq {
	if !p.IsSetReq() {
		return UploadApplistArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UploadApplistArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadApplistArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UploadApplistArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &AckReq{}
	if err := p.Req.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Req, err)
	}
	return nil
}

func (p *UploadApplistArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upload_applist_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UploadApplistArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:req: %s", p, err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Req, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:req: %s", p, err)
	}
	return err
}

func (p *UploadApplistArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadApplistArgs(%+v)", *p)
}

type UploadApplistResult struct {
	Success *AckRsp `thrift:"success,0" json:"success"`
}

func NewUploadApplistResult() *UploadApplistResult {
	return &UploadApplistResult{}
}

var UploadApplistResult_Success_DEFAULT *AckRsp

func (p *UploadApplistResult) GetSuccess() *AckRsp {
	if !p.IsSetSuccess() {
		return UploadApplistResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UploadApplistResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UploadApplistResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UploadApplistResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AckRsp{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *UploadApplistResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upload_applist_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UploadApplistResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *UploadApplistResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadApplistResult(%+v)", *p)
}
