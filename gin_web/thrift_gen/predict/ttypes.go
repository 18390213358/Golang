// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package predict

import (
	"bytes"
	"fmt"
	"code.byted.org/gopkg/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type AdLocation struct {
	PositionId   int64 `thrift:"position_id,1" json:"position_id"`
	PageId       int64 `thrift:"page_id,2" json:"page_id"`
	BlockId      int64 `thrift:"block_id,3" json:"block_id"`
	RankId       int64 `thrift:"rank_id,4" json:"rank_id"`
	CategoryId   int64 `thrift:"category_id,5" json:"category_id"`
	TagId        int64 `thrift:"tag_id,6" json:"tag_id"`
	Position     int32 `thrift:"position,7" json:"position"`
	PositionType int32 `thrift:"position_type,8" json:"position_type"`
}

func NewAdLocation() *AdLocation {
	return &AdLocation{}
}

func (p *AdLocation) GetPositionId() int64 {
	return p.PositionId
}

func (p *AdLocation) GetPageId() int64 {
	return p.PageId
}

func (p *AdLocation) GetBlockId() int64 {
	return p.BlockId
}

func (p *AdLocation) GetRankId() int64 {
	return p.RankId
}

func (p *AdLocation) GetCategoryId() int64 {
	return p.CategoryId
}

func (p *AdLocation) GetTagId() int64 {
	return p.TagId
}

func (p *AdLocation) GetPosition() int32 {
	return p.Position
}

func (p *AdLocation) GetPositionType() int32 {
	return p.PositionType
}
func (p *AdLocation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AdLocation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PositionId = v
	}
	return nil
}

func (p *AdLocation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PageId = v
	}
	return nil
}

func (p *AdLocation) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *AdLocation) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.RankId = v
	}
	return nil
}

func (p *AdLocation) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CategoryId = v
	}
	return nil
}

func (p *AdLocation) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.TagId = v
	}
	return nil
}

func (p *AdLocation) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Position = v
	}
	return nil
}

func (p *AdLocation) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.PositionType = v
	}
	return nil
}

func (p *AdLocation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AdLocation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AdLocation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("position_id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:position_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PositionId)); err != nil {
		return fmt.Errorf("%T.position_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:position_id: %s", p, err)
	}
	return err
}

func (p *AdLocation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page_id", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:page_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.PageId)); err != nil {
		return fmt.Errorf("%T.page_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:page_id: %s", p, err)
	}
	return err
}

func (p *AdLocation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("block_id", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:block_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return fmt.Errorf("%T.block_id (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:block_id: %s", p, err)
	}
	return err
}

func (p *AdLocation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rank_id", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:rank_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RankId)); err != nil {
		return fmt.Errorf("%T.rank_id (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:rank_id: %s", p, err)
	}
	return err
}

func (p *AdLocation) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("category_id", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:category_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CategoryId)); err != nil {
		return fmt.Errorf("%T.category_id (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:category_id: %s", p, err)
	}
	return err
}

func (p *AdLocation) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tag_id", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:tag_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TagId)); err != nil {
		return fmt.Errorf("%T.tag_id (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:tag_id: %s", p, err)
	}
	return err
}

func (p *AdLocation) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("position", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:position: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Position)); err != nil {
		return fmt.Errorf("%T.position (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:position: %s", p, err)
	}
	return err
}

func (p *AdLocation) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("position_type", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:position_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PositionType)); err != nil {
		return fmt.Errorf("%T.position_type (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:position_type: %s", p, err)
	}
	return err
}

func (p *AdLocation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdLocation(%+v)", *p)
}

type UnitRecommend struct {
	UnitId    int64    `thrift:"unit_id,1" json:"unit_id"`
	AppId     int64    `thrift:"app_id,2" json:"app_id"`
	Score     float64  `thrift:"score,3" json:"score"`
	Price     float64  `thrift:"price,4" json:"price"`
	KwType    *int16   `thrift:"kw_type,5" json:"kw_type"`
	Keyword   *string  `thrift:"keyword,6" json:"keyword"`
	Ctr       *float64 `thrift:"ctr,7" json:"ctr"`
	Relevance *float64 `thrift:"relevance,8" json:"relevance"`
	Id        *int64   `thrift:"id,9" json:"id"`
}

func NewUnitRecommend() *UnitRecommend {
	return &UnitRecommend{}
}

func (p *UnitRecommend) GetUnitId() int64 {
	return p.UnitId
}

func (p *UnitRecommend) GetAppId() int64 {
	return p.AppId
}

func (p *UnitRecommend) GetScore() float64 {
	return p.Score
}

func (p *UnitRecommend) GetPrice() float64 {
	return p.Price
}

var UnitRecommend_KwType_DEFAULT int16

func (p *UnitRecommend) GetKwType() int16 {
	if !p.IsSetKwType() {
		return UnitRecommend_KwType_DEFAULT
	}
	return *p.KwType
}

var UnitRecommend_Keyword_DEFAULT string

func (p *UnitRecommend) GetKeyword() string {
	if !p.IsSetKeyword() {
		return UnitRecommend_Keyword_DEFAULT
	}
	return *p.Keyword
}

var UnitRecommend_Ctr_DEFAULT float64

func (p *UnitRecommend) GetCtr() float64 {
	if !p.IsSetCtr() {
		return UnitRecommend_Ctr_DEFAULT
	}
	return *p.Ctr
}

var UnitRecommend_Relevance_DEFAULT float64

func (p *UnitRecommend) GetRelevance() float64 {
	if !p.IsSetRelevance() {
		return UnitRecommend_Relevance_DEFAULT
	}
	return *p.Relevance
}

var UnitRecommend_Id_DEFAULT int64

func (p *UnitRecommend) GetId() int64 {
	if !p.IsSetId() {
		return UnitRecommend_Id_DEFAULT
	}
	return *p.Id
}
func (p *UnitRecommend) IsSetKwType() bool {
	return p.KwType != nil
}

func (p *UnitRecommend) IsSetKeyword() bool {
	return p.Keyword != nil
}

func (p *UnitRecommend) IsSetCtr() bool {
	return p.Ctr != nil
}

func (p *UnitRecommend) IsSetRelevance() bool {
	return p.Relevance != nil
}

func (p *UnitRecommend) IsSetId() bool {
	return p.Id != nil
}

func (p *UnitRecommend) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnitRecommend) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.UnitId = v
	}
	return nil
}

func (p *UnitRecommend) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *UnitRecommend) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Score = v
	}
	return nil
}

func (p *UnitRecommend) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *UnitRecommend) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.KwType = &v
	}
	return nil
}

func (p *UnitRecommend) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Keyword = &v
	}
	return nil
}

func (p *UnitRecommend) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Ctr = &v
	}
	return nil
}

func (p *UnitRecommend) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Relevance = &v
	}
	return nil
}

func (p *UnitRecommend) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Id = &v
	}
	return nil
}

func (p *UnitRecommend) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnitRecommend"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnitRecommend) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unit_id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:unit_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.UnitId)); err != nil {
		return fmt.Errorf("%T.unit_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:unit_id: %s", p, err)
	}
	return err
}

func (p *UnitRecommend) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_id", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:app_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.AppId)); err != nil {
		return fmt.Errorf("%T.app_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:app_id: %s", p, err)
	}
	return err
}

func (p *UnitRecommend) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("score", thrift.DOUBLE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:score: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Score)); err != nil {
		return fmt.Errorf("%T.score (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:score: %s", p, err)
	}
	return err
}

func (p *UnitRecommend) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.DOUBLE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:price: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return fmt.Errorf("%T.price (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:price: %s", p, err)
	}
	return err
}

func (p *UnitRecommend) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetKwType() {
		if err := oprot.WriteFieldBegin("kw_type", thrift.I16, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:kw_type: %s", p, err)
		}
		if err := oprot.WriteI16(int16(*p.KwType)); err != nil {
			return fmt.Errorf("%T.kw_type (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:kw_type: %s", p, err)
		}
	}
	return err
}

func (p *UnitRecommend) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyword() {
		if err := oprot.WriteFieldBegin("keyword", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:keyword: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Keyword)); err != nil {
			return fmt.Errorf("%T.keyword (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:keyword: %s", p, err)
		}
	}
	return err
}

func (p *UnitRecommend) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCtr() {
		if err := oprot.WriteFieldBegin("ctr", thrift.DOUBLE, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:ctr: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.Ctr)); err != nil {
			return fmt.Errorf("%T.ctr (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:ctr: %s", p, err)
		}
	}
	return err
}

func (p *UnitRecommend) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelevance() {
		if err := oprot.WriteFieldBegin("relevance", thrift.DOUBLE, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:relevance: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(*p.Relevance)); err != nil {
			return fmt.Errorf("%T.relevance (8) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:relevance: %s", p, err)
		}
	}
	return err
}

func (p *UnitRecommend) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.I64, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:id: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Id)); err != nil {
			return fmt.Errorf("%T.id (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:id: %s", p, err)
		}
	}
	return err
}

func (p *UnitRecommend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnitRecommend(%+v)", *p)
}

type Idea struct {
	IdeaId int32 `thrift:"idea_id,1" json:"idea_id"`
	Source int16 `thrift:"source,2" json:"source"`
}

func NewIdea() *Idea {
	return &Idea{}
}

func (p *Idea) GetIdeaId() int32 {
	return p.IdeaId
}

func (p *Idea) GetSource() int16 {
	return p.Source
}
func (p *Idea) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Idea) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.IdeaId = v
	}
	return nil
}

func (p *Idea) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Source = v
	}
	return nil
}

func (p *Idea) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Idea"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Idea) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idea_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:idea_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.IdeaId)); err != nil {
		return fmt.Errorf("%T.idea_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:idea_id: %s", p, err)
	}
	return err
}

func (p *Idea) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source", thrift.I16, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:source: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Source)); err != nil {
		return fmt.Errorf("%T.source (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:source: %s", p, err)
	}
	return err
}

func (p *Idea) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Idea(%+v)", *p)
}

type Req struct {
	Imei             string        `thrift:"imei,1" json:"imei"`
	SessionId        string        `thrift:"session_id,2" json:"session_id"`
	AdLocations      []*AdLocation `thrift:"ad_locations,3" json:"ad_locations"`
	ContextInfo      string        `thrift:"context_info,4" json:"context_info"`
	AbtestParameters string        `thrift:"abtest_parameters,5" json:"abtest_parameters"`
	Query            *string       `thrift:"query,6" json:"query"`
	QueryType        *string       `thrift:"query_type,7" json:"query_type"`
	ImprList         []string      `thrift:"impr_list,8" json:"impr_list"`
	EnableRank       bool          `thrift:"enable_rank,9" json:"enable_rank"`
	Source           int16         `thrift:"source,10" json:"source"`
	Topk             int16         `thrift:"topk,11" json:"topk"`
	Ideas            []*Idea       `thrift:"ideas,12" json:"ideas"`
	ReqId            *string       `thrift:"req_id,13" json:"req_id"`
	RelAppId         int64         `thrift:"rel_app_id,14" json:"rel_app_id"`
	Business         int16         `thrift:"business,15" json:"business"`
	// unused fields # 16 to 254
	Debug bool `thrift:"debug,255" json:"debug"`
}

func NewReq() *Req {
	return &Req{
		EnableRank: true,

		Source: 1,

		Business: 1,
	}
}

func (p *Req) GetImei() string {
	return p.Imei
}

func (p *Req) GetSessionId() string {
	return p.SessionId
}

func (p *Req) GetAdLocations() []*AdLocation {
	return p.AdLocations
}

func (p *Req) GetContextInfo() string {
	return p.ContextInfo
}

func (p *Req) GetAbtestParameters() string {
	return p.AbtestParameters
}

var Req_Query_DEFAULT string

func (p *Req) GetQuery() string {
	if !p.IsSetQuery() {
		return Req_Query_DEFAULT
	}
	return *p.Query
}

var Req_QueryType_DEFAULT string

func (p *Req) GetQueryType() string {
	if !p.IsSetQueryType() {
		return Req_QueryType_DEFAULT
	}
	return *p.QueryType
}

var Req_ImprList_DEFAULT []string

func (p *Req) GetImprList() []string {
	return p.ImprList
}

var Req_EnableRank_DEFAULT bool = true

func (p *Req) GetEnableRank() bool {
	return p.EnableRank
}

var Req_Source_DEFAULT int16 = 1

func (p *Req) GetSource() int16 {
	return p.Source
}

var Req_Topk_DEFAULT int16 = 0

func (p *Req) GetTopk() int16 {
	return p.Topk
}

var Req_Ideas_DEFAULT []*Idea

func (p *Req) GetIdeas() []*Idea {
	return p.Ideas
}

var Req_ReqId_DEFAULT string

func (p *Req) GetReqId() string {
	if !p.IsSetReqId() {
		return Req_ReqId_DEFAULT
	}
	return *p.ReqId
}

var Req_RelAppId_DEFAULT int64 = 0

func (p *Req) GetRelAppId() int64 {
	return p.RelAppId
}

var Req_Business_DEFAULT int16 = 1

func (p *Req) GetBusiness() int16 {
	return p.Business
}

var Req_Debug_DEFAULT bool = false

func (p *Req) GetDebug() bool {
	return p.Debug
}
func (p *Req) IsSetQuery() bool {
	return p.Query != nil
}

func (p *Req) IsSetQueryType() bool {
	return p.QueryType != nil
}

func (p *Req) IsSetImprList() bool {
	return p.ImprList != nil
}

func (p *Req) IsSetEnableRank() bool {
	return p.EnableRank != Req_EnableRank_DEFAULT
}

func (p *Req) IsSetSource() bool {
	return p.Source != Req_Source_DEFAULT
}

func (p *Req) IsSetTopk() bool {
	return p.Topk != Req_Topk_DEFAULT
}

func (p *Req) IsSetIdeas() bool {
	return p.Ideas != nil
}

func (p *Req) IsSetReqId() bool {
	return p.ReqId != nil
}

func (p *Req) IsSetRelAppId() bool {
	return p.RelAppId != Req_RelAppId_DEFAULT
}

func (p *Req) IsSetBusiness() bool {
	return p.Business != Req_Business_DEFAULT
}

func (p *Req) IsSetDebug() bool {
	return p.Debug != Req_Debug_DEFAULT
}

func (p *Req) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Req) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Imei = v
	}
	return nil
}

func (p *Req) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *Req) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*AdLocation, 0, size)
	p.AdLocations = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &AdLocation{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.AdLocations = append(p.AdLocations, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Req) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ContextInfo = v
	}
	return nil
}

func (p *Req) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.AbtestParameters = v
	}
	return nil
}

func (p *Req) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Query = &v
	}
	return nil
}

func (p *Req) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.QueryType = &v
	}
	return nil
}

func (p *Req) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ImprList = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.ImprList = append(p.ImprList, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Req) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.EnableRank = v
	}
	return nil
}

func (p *Req) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.Source = v
	}
	return nil
}

func (p *Req) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.Topk = v
	}
	return nil
}

func (p *Req) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Idea, 0, size)
	p.Ideas = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &Idea{}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.Ideas = append(p.Ideas, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Req) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.ReqId = &v
	}
	return nil
}

func (p *Req) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 14: %s", err)
	} else {
		p.RelAppId = v
	}
	return nil
}

func (p *Req) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 15: %s", err)
	} else {
		p.Business = v
	}
	return nil
}

func (p *Req) ReadField255(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 255: %s", err)
	} else {
		p.Debug = v
	}
	return nil
}

func (p *Req) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Req"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Req) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("imei", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:imei: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Imei)); err != nil {
		return fmt.Errorf("%T.imei (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:imei: %s", p, err)
	}
	return err
}

func (p *Req) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("session_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:session_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.session_id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:session_id: %s", p, err)
	}
	return err
}

func (p *Req) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ad_locations", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ad_locations: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AdLocations)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.AdLocations {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ad_locations: %s", p, err)
	}
	return err
}

func (p *Req) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context_info", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:context_info: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ContextInfo)); err != nil {
		return fmt.Errorf("%T.context_info (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:context_info: %s", p, err)
	}
	return err
}

func (p *Req) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("abtest_parameters", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:abtest_parameters: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AbtestParameters)); err != nil {
		return fmt.Errorf("%T.abtest_parameters (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:abtest_parameters: %s", p, err)
	}
	return err
}

func (p *Req) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuery() {
		if err := oprot.WriteFieldBegin("query", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:query: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Query)); err != nil {
			return fmt.Errorf("%T.query (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:query: %s", p, err)
		}
	}
	return err
}

func (p *Req) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryType() {
		if err := oprot.WriteFieldBegin("query_type", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:query_type: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.QueryType)); err != nil {
			return fmt.Errorf("%T.query_type (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:query_type: %s", p, err)
		}
	}
	return err
}

func (p *Req) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetImprList() {
		if err := oprot.WriteFieldBegin("impr_list", thrift.LIST, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:impr_list: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ImprList)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.ImprList {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:impr_list: %s", p, err)
		}
	}
	return err
}

func (p *Req) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableRank() {
		if err := oprot.WriteFieldBegin("enable_rank", thrift.BOOL, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:enable_rank: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.EnableRank)); err != nil {
			return fmt.Errorf("%T.enable_rank (9) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:enable_rank: %s", p, err)
		}
	}
	return err
}

func (p *Req) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.I16, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:source: %s", p, err)
		}
		if err := oprot.WriteI16(int16(p.Source)); err != nil {
			return fmt.Errorf("%T.source (10) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:source: %s", p, err)
		}
	}
	return err
}

func (p *Req) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopk() {
		if err := oprot.WriteFieldBegin("topk", thrift.I16, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:topk: %s", p, err)
		}
		if err := oprot.WriteI16(int16(p.Topk)); err != nil {
			return fmt.Errorf("%T.topk (11) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:topk: %s", p, err)
		}
	}
	return err
}

func (p *Req) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdeas() {
		if err := oprot.WriteFieldBegin("ideas", thrift.LIST, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:ideas: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ideas)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Ideas {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:ideas: %s", p, err)
		}
	}
	return err
}

func (p *Req) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetReqId() {
		if err := oprot.WriteFieldBegin("req_id", thrift.STRING, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:req_id: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ReqId)); err != nil {
			return fmt.Errorf("%T.req_id (13) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:req_id: %s", p, err)
		}
	}
	return err
}

func (p *Req) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelAppId() {
		if err := oprot.WriteFieldBegin("rel_app_id", thrift.I64, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:rel_app_id: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.RelAppId)); err != nil {
			return fmt.Errorf("%T.rel_app_id (14) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:rel_app_id: %s", p, err)
		}
	}
	return err
}

func (p *Req) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusiness() {
		if err := oprot.WriteFieldBegin("business", thrift.I16, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:business: %s", p, err)
		}
		if err := oprot.WriteI16(int16(p.Business)); err != nil {
			return fmt.Errorf("%T.business (15) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:business: %s", p, err)
		}
	}
	return err
}

func (p *Req) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebug() {
		if err := oprot.WriteFieldBegin("debug", thrift.BOOL, 255); err != nil {
			return fmt.Errorf("%T write field begin error 255:debug: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Debug)); err != nil {
			return fmt.Errorf("%T.debug (255) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 255:debug: %s", p, err)
		}
	}
	return err
}

func (p *Req) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Req(%+v)", *p)
}

type Rsp struct {
	Status      string                     `thrift:"status,1" json:"status"`
	RankResults map[int64][]*UnitRecommend `thrift:"rank_results,2" json:"rank_results"`
	Version     string                     `thrift:"version,3" json:"version"`
}

func NewRsp() *Rsp {
	return &Rsp{}
}

func (p *Rsp) GetStatus() string {
	return p.Status
}

func (p *Rsp) GetRankResults() map[int64][]*UnitRecommend {
	return p.RankResults
}

func (p *Rsp) GetVersion() string {
	return p.Version
}
func (p *Rsp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Rsp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *Rsp) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[int64][]*UnitRecommend, size)
	p.RankResults = tMap
	for i := 0; i < size; i++ {
		var _key3 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key3 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*UnitRecommend, 0, size)
		_val4 := tSlice
		for i := 0; i < size; i++ {
			_elem5 := &UnitRecommend{}
			if err := _elem5.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem5, err)
			}
			_val4 = append(_val4, _elem5)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.RankResults[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Rsp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *Rsp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Rsp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Rsp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:status: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return fmt.Errorf("%T.status (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:status: %s", p, err)
	}
	return err
}

func (p *Rsp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rank_results", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:rank_results: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.LIST, len(p.RankResults)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.RankResults {
		if err := oprot.WriteI64(int64(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:rank_results: %s", p, err)
	}
	return err
}

func (p *Rsp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:version: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return fmt.Errorf("%T.version (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:version: %s", p, err)
	}
	return err
}

func (p *Rsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Rsp(%+v)", *p)
}

type SearchRsp struct {
	Status      string           `thrift:"status,1" json:"status"`
	RankResults []*UnitRecommend `thrift:"rank_results,2" json:"rank_results"`
	Version     string           `thrift:"version,3" json:"version"`
}

func NewSearchRsp() *SearchRsp {
	return &SearchRsp{}
}

func (p *SearchRsp) GetStatus() string {
	return p.Status
}

func (p *SearchRsp) GetRankResults() []*UnitRecommend {
	return p.RankResults
}

func (p *SearchRsp) GetVersion() string {
	return p.Version
}
func (p *SearchRsp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SearchRsp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *SearchRsp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*UnitRecommend, 0, size)
	p.RankResults = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &UnitRecommend{}
		if err := _elem6.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem6, err)
		}
		p.RankResults = append(p.RankResults, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SearchRsp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *SearchRsp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchRsp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SearchRsp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:status: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return fmt.Errorf("%T.status (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:status: %s", p, err)
	}
	return err
}

func (p *SearchRsp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rank_results", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:rank_results: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RankResults)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.RankResults {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:rank_results: %s", p, err)
	}
	return err
}

func (p *SearchRsp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:version: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return fmt.Errorf("%T.version (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:version: %s", p, err)
	}
	return err
}

func (p *SearchRsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchRsp(%+v)", *p)
}

type BinaryRsp struct {
	Status      string `thrift:"status,1" json:"status"`
	RankResults []byte `thrift:"rank_results,2" json:"rank_results"`
}

func NewBinaryRsp() *BinaryRsp {
	return &BinaryRsp{}
}

func (p *BinaryRsp) GetStatus() string {
	return p.Status
}

func (p *BinaryRsp) GetRankResults() []byte {
	return p.RankResults
}
func (p *BinaryRsp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BinaryRsp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *BinaryRsp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.RankResults = v
	}
	return nil
}

func (p *BinaryRsp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BinaryRsp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BinaryRsp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:status: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return fmt.Errorf("%T.status (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:status: %s", p, err)
	}
	return err
}

func (p *BinaryRsp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rank_results", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:rank_results: %s", p, err)
	}
	if err := oprot.WriteBinary(p.RankResults); err != nil {
		return fmt.Errorf("%T.rank_results (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:rank_results: %s", p, err)
	}
	return err
}

func (p *BinaryRsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BinaryRsp(%+v)", *p)
}

type AckReq struct {
	Message        string  `thrift:"message,1" json:"message"`
	MessageType    *string `thrift:"message_type,2" json:"message_type"`
	DisableDatabus *bool   `thrift:"disable_databus,3" json:"disable_databus"`
}

func NewAckReq() *AckReq {
	return &AckReq{}
}

func (p *AckReq) GetMessage() string {
	return p.Message
}

var AckReq_MessageType_DEFAULT string

func (p *AckReq) GetMessageType() string {
	if !p.IsSetMessageType() {
		return AckReq_MessageType_DEFAULT
	}
	return *p.MessageType
}

var AckReq_DisableDatabus_DEFAULT bool

func (p *AckReq) GetDisableDatabus() bool {
	if !p.IsSetDisableDatabus() {
		return AckReq_DisableDatabus_DEFAULT
	}
	return *p.DisableDatabus
}
func (p *AckReq) IsSetMessageType() bool {
	return p.MessageType != nil
}

func (p *AckReq) IsSetDisableDatabus() bool {
	return p.DisableDatabus != nil
}

func (p *AckReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AckReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *AckReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MessageType = &v
	}
	return nil
}

func (p *AckReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DisableDatabus = &v
	}
	return nil
}

func (p *AckReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AckReq"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AckReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *AckReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageType() {
		if err := oprot.WriteFieldBegin("message_type", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:message_type: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.MessageType)); err != nil {
			return fmt.Errorf("%T.message_type (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:message_type: %s", p, err)
		}
	}
	return err
}

func (p *AckReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisableDatabus() {
		if err := oprot.WriteFieldBegin("disable_databus", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:disable_databus: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.DisableDatabus)); err != nil {
			return fmt.Errorf("%T.disable_databus (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:disable_databus: %s", p, err)
		}
	}
	return err
}

func (p *AckReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AckReq(%+v)", *p)
}

type AckRsp struct {
	Status string `thrift:"status,1" json:"status"`
}

func NewAckRsp() *AckRsp {
	return &AckRsp{}
}

func (p *AckRsp) GetStatus() string {
	return p.Status
}
func (p *AckRsp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AckRsp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *AckRsp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AckRsp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AckRsp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:status: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return fmt.Errorf("%T.status (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:status: %s", p, err)
	}
	return err
}

func (p *AckRsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AckRsp(%+v)", *p)
}

type ServerImprRsp struct {
	Status int16 `thrift:"status,1" json:"status"`
}

func NewServerImprRsp() *ServerImprRsp {
	return &ServerImprRsp{}
}

func (p *ServerImprRsp) GetStatus() int16 {
	return p.Status
}
func (p *ServerImprRsp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ServerImprRsp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *ServerImprRsp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServerImprRsp"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ServerImprRsp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I16, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:status: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Status)); err != nil {
		return fmt.Errorf("%T.status (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:status: %s", p, err)
	}
	return err
}

func (p *ServerImprRsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerImprRsp(%+v)", *p)
}
